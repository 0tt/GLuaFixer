module {GLuaFixer.AG.ASTLint}{}{}

imports
{
import GLua.AG.AST
import Text.ParserCombinators.UU.BasicInstances
import GLua.AG.Token
import qualified GLua.AG.PrettyPrint as PP
import qualified Data.Set as S
import Data.Maybe

import Debug.Trace
}
include "../../GLua/AG/AST.ag"
include "../../GLua/AG/Token.ag"

----------------------------------------
--  Helper functions
----------------------------------------
{
warn :: LineColPos -> String -> String
warn pos str = "[Warning] " ++ PP.renderPos pos ++ ": " ++ str

-- Used in detecting "not (a == b)" kind of things
oppositeBinOp :: BinOp -> Maybe String
oppositeBinOp ALT = Just ">="
oppositeBinOp AGT = Just "<="
oppositeBinOp ALEQ = Just ">"
oppositeBinOp AGEQ = Just "<"
oppositeBinOp ANEq = Just "=="
oppositeBinOp AEq = Just "~="
oppositeBinOp _ = Nothing

-- Variables in scopes
}

----------------------------------------
--  Attributes
----------------------------------------

attr AllStuff
    syn warnings use {++} {[]} :: {[String]}

    inh scopeLevel :: Int
    inh loopLevel :: Int -- In how many scopes of loops we are. Used in checking labels

attr AllStuff MToken MTokenList
    chn mtokenPos :: {LineColPos} -- The location of the warning

    chn scopes :: {[S.Set String]} -- Scopes of variables and parameters

attr AllStuff MToken MTokenList Token TokenList
    syn copy :: self
    syn identifier use {const} {"Unknown identifier"} :: String -- identifier of the first token

attr MToken
    syn mtok :: Token -- The token held by an MToken

attr Field FieldList
    chn fieldNames :: {S.Set Token} -- The field names of a table

attr UnOp
    syn isNegation :: Bool -- Whether this unop is a negation. Used in "not (a == b)" check

attr MExpr Expr PrefixExp
    inh isNegation :: Bool

---------------------------------------
--  Semantics
---------------------------------------
sem Token
    | Label
        lhs.identifier          = @lbl
    | Identifier
        lhs.identifier          = @ident

sem MToken
    | MToken
        lhs.mtokenPos           = @mpos
        lhs.mtok                = @mtok.copy

sem MTokenList MStatList MExprList FieldList VarsList
    | Cons
        lhs.mtokenPos           = @hd.mtokenPos
    | Nil

sem MExprList
    | Cons
        hd.isNegation           = False
    | Nil

sem Declaration
    | Tuple
        lhs.mtokenPos           = @x1.mtokenPos
        x1.isNegation           = False
        x2.isNegation           = False

sem AST
    | AST
        chunk.scopes            = S.empty : @lhs.scopes

sem Block
    | Block
        stats.scopeLevel        = @lhs.scopeLevel + 1
        +warnings               = if @lhs.scopeLevel /= 5 then id else
                                    (:) $ warn @stats.mtokenPos "Are you Egyptian? What's with these fucking scope pyramids!?"
        lhs.scopes              = tail @stats.scopes

sem MStat
    | MStat
        lhs.mtokenPos           = @pos

sem Stat
    | Def
    | LocDef
    | AFuncCall
        fn.isNegation           = False
    | ALabel
    | ABreak
    | AContinue
    | AGoto
        +warnings               = if @lhs.loopLevel >= 2 then id else
                                    (:) $ warn @lbl.mtokenPos "Don't use labels and gotos unless you're jumping out of multiple loops."
    | ADo
        body.scopes             = S.empty : @lhs.scopes
    | AWhile
        body.loopLevel          = @lhs.loopLevel + 1
        cond.isNegation         = False
        body.scopes             = S.empty : @lhs.scopes
    | ARepeat
        body.loopLevel          = @lhs.loopLevel + 1
        cond.isNegation         = False
        body.scopes             = S.empty : @lhs.scopes
    | AIf
        cond.isNegation         = False
        body.scopes             = S.empty : @lhs.scopes
    | ANFor
        body.loopLevel          = @lhs.loopLevel + 1
        val.isNegation          = False
        to.isNegation           = False
        step.isNegation         = False
        body.scopes             = S.singleton @var.identifier : @lhs.scopes
    | AGFor
        body.loopLevel          = @lhs.loopLevel + 1
        -- The variables the for loop introduces
        loc.introduces          = S.fromList $ map tokenLabel @vars
        body.scopes             = @loc.introduces : @lhs.scopes
    | AFunc
        loc.introduces          = S.fromList $ map tokenLabel @args
        body.scopes             = @loc.introduces : @lhs.scopes
    | ALocFunc
        loc.introduces          = S.fromList $ map tokenLabel @args
        body.scopes             = @loc.introduces : @lhs.scopes

sem AReturn
    | AReturn
        lhs.mtokenPos           = @pos
    | NoReturn


sem FuncName
    | FuncName
        lhs.mtokenPos           = mpos (head @names)

sem PrefixExp
    | PFVar
        lhs.mtokenPos           = @name.mtokenPos
    | ExprVar
        lhs.mtokenPos           = @expr.mtokenPos

sem PFExprSuffix
    | Call
    | MetaCall
    | ExprIndex
        index.isNegation        = False
    | DotIndex

sem ElseIf
    | Tuple
        x1.isNegation           = False

sem MExpr
    | MExpr
        lhs.mtokenPos           = @pos
        expr.mtokenPos          = @pos

sem Expr
    | ANil
    | AFalse
    | ATrue
    | ANumber
    | AString
    | AVarArg
    | AnonymousFunc
        loc.introduces          = S.fromList $ map tokenLabel @pars
        body.scopes             = @loc.introduces : @lhs.scopes
    | APrefixExpr
    | ATableConstructor
        fields.fieldNames       = S.empty
    | BinOpExpr
        left.isNegation         = False
        right.isNegation        = False

        -- Wheter someone is doing "not (a == b)" or "not (a ~= b)"
        loc.stupidNegation      = oppositeBinOp @op.copy
        +warnings               = if not @lhs.isNegation || isNothing @loc.stupidNegation then id else
                                    (:) $ warn @lhs.mtokenPos "Silly negation. Use '" ++ fromJust @loc.stupidNegation ++ "'"
    | UnOpExpr
        right.isNegation        = @op.isNegation

sem Args
    | ListArgs
    | TableArg
        arg.fieldNames          = S.empty
    | StringArg

sem Field
    | ExprField
        lhs.mtokenPos           = @key.mtokenPos
        key.isNegation          = False
        value.isNegation        = False
    | NamedField
        loc.mtokenPos           = @key.mtokenPos
        lhs.fieldNames          = S.insert @key.mtok @lhs.fieldNames
        value.isNegation        = False
        +warnings               = if not $ S.member @key.mtok @lhs.fieldNames then id else
                                    (:) $ warn @key.mtokenPos "Duplicate key in table: '" ++ show @key.mtok ++ "'."
    | UnnamedField
        value.isNegation        = False

sem UnOp
    | UnMinus
        lhs.isNegation          = False
    | ANot
        lhs.isNegation          = True
    | AHash
        lhs.isNegation          = False
---------------------------------------
--  Individual functions
---------------------------------------
{
inh_AST = Inh_AST
            0
            (LineColPos 0 0 0)
            0
            [S.empty]

astWarnings :: AST -> [String]
astWarnings p = warnings_Syn_AST (wrap_AST (sem_AST p) inh_AST)
}
