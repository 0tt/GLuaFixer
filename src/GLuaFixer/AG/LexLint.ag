module {GLuaFixer.AG.LexLint}{}{}

imports
{
import Data.Array.Unboxed
import Data.List
import GLua.TokenTypes
import GLua.AG.Token
import GLua.AG.PrettyPrint
import GLuaFixer.LintSettings
}
include "../../GLua/AG/Token.ag"


{
----------------------------------------
--  Correcting token positions
----------------------------------------
customAdvanceChr :: LineColPos -> Char -> LineColPos
customAdvanceChr (LineColPos line pos abs) '\n' = LineColPos (line + 1) 0 (abs + 1)
customAdvanceChr (LineColPos line pos abs) _    = LineColPos line (pos + 1) (abs + 1)

customAdvanceStr :: LineColPos -> String -> LineColPos
customAdvanceStr lp str = foldl' customAdvanceChr lp str

customAdvanceToken :: LineColPos -> Token -> LineColPos
customAdvanceToken (LineColPos line pos abs) t = let len = tokenSize t in LineColPos line (pos + len) (abs + len)

----------------------------------------
--  C-style / Lua-style syntax inconsistencies
----------------------------------------
-- For detecting the usage of Lua/C syntax inconsistently
data SyntaxUsed = SyntaxUsed { luaUsed :: Bool, cUsed :: Bool } deriving (Show)

-- Monoid instance
instance Monoid SyntaxUsed where
    mempty = SyntaxUsed False False
    mappend (SyntaxUsed l1 c1) (SyntaxUsed l2 c2) = SyntaxUsed (l1 || l2) (c1 || c2)

-- Syntax inconsistency warning
syntaxInconsistency :: String -> String -> String
syntaxInconsistency l c = "Inconsistent use of '" ++ l ++ "' and '" ++ c ++ "'"

mTokenWarning :: MToken -> String -> String
mTokenWarning (MToken pos _) str = "[Warning] " ++ renderPos pos ++ ": " ++ str

-- Whether a token is whitespace
whitespace :: Token -> Bool
whitespace (Whitespace _) = True
whitespace _ = False

-- Whether a token is a certain identifier
ident :: String -> Token -> Bool
ident = (==) . Identifier

----------------------------------------
--  Deprecated stuff
----------------------------------------
badSequences :: [(LintSettings -> Bool, String, [Token -> Bool], String)]
badSequences = [
        -- Global/library functions
        (reportDeprecated, "Deprecated", [ident "gcinfo"], "Use collectgarbage(\"count\") instead"),
        (reportDeprecated, "Deprecated", [ident "GetConVarNumber"], "Use ConVar objects instead"),
        (reportDeprecated, "Deprecated", [ident "GetConVarString"], "Use ConVar objects instead"),
        (reportDeprecated, "Deprecated", [ident "IncludeCS"], "Use AddCSLuaFile in the file itself instead"),
        (reportDeprecated, "Deprecated", [ident "SScale"], "Use ScreenScale instead"),
        (reportDeprecated, "Deprecated", [ident "UTIL_IsUselessModel"], "Use IsUselessModel instead"),
        (reportDeprecated, "Deprecated", [ident "ValidPanel"], "Use IsValid instead"),

        (reportDeprecated, "Deprecated", [ident "ai", (==) Dot, ident "GetScheduleID"], "The function is broken"),
        (reportDeprecated, "Deprecated", [ident "ai", (==) Dot, ident "GetTaskID"], "The function is broken"),

        (reportDeprecated, "Deprecated", [ident "math", (==) Dot, ident "Dist"], "Use math.Distance instead"),
        (reportDeprecated, "Deprecated", [ident "math", (==) Dot, ident "mod"], "Use math.fmod instead"),

        (reportDeprecated, "Deprecated", [ident "spawnmenu", (==) Dot, ident "DoSaveToTextFiles"], "Use spawnmenu.SaveToTextFiles instead"),
        (reportDeprecated, "Deprecated", [ident "spawnmenu", (==) Dot, ident "PopulateFromEngineTextFiles"], "Use spawnmenu.PopulateFromTextFiles instead"),
        (reportDeprecated, "Deprecated", [ident "spawnmenu", (==) Dot, ident "SwitchToolTab"], "The function is broken"),

        (reportDeprecated, "Deprecated", [ident "string", (==) Dot, ident "GetChar"], "Use either string.sub(str, index, index) or str[index]"),
        (reportDeprecated, "Deprecated", [ident "string", (==) Dot, ident "gfind"], "Use string.gmatch instead"),

        (reportDeprecated, "Deprecated", [ident "surface", (==) Dot, ident "ScreenHeight"], "Use ScrH instead"),
        (reportDeprecated, "Deprecated", [ident "surface", (==) Dot, ident "ScreenWidth"], "Use ScrW instead"),

        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "FindNext"], "Use ipairs or something instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "FindPrev"], "Use ipairs or something instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "foreach"], "Use pairs instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "ForEach"], "Use pairs instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "foreachi"], "Use ipairs instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "GetFirstKey"], "Use next instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "GetFirstValue"], "Use next instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "GetLastKey"], "Use #tbl instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "GetLastValue"], "Use tbl[#tbl] instead"),
        (reportDeprecated, "Deprecated", [ident "table", (==) Dot, ident "getn"], "Use #tbl instead"),

        (reportDeprecated, "Deprecated", [ident "timer", (==) Dot, ident "Check"], "The function is broken"),
        (reportDeprecated, "Deprecated", [ident "timer", (==) Dot, ident "Destroy"], "Use timer.Remove instead"),

        (reportDeprecated, "Deprecated", [ident "umsg", (==) Dot, ident "Start"], "Use net messages."),
        (reportDeprecated, "Deprecated", [ident "SendUserMessage"], "Use net messages."),

        (reportDeprecated, "Deprecated", [ident "util", (==) Dot, ident "tobool"], "Use tobool, without the util bit"),
        (reportDeprecated, "Deprecated", [ident "util", (==) Dot, ident "TraceEntityHull"], "The function is broken"),

        -- CLuaLocomotion functions
        (reportDeprecated, "Deprecated", [(==) Colon, ident "IsAscendingOrDescendingLadder"], "Use :IsUsingLadder instead"),

        -- Panel functions
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetDrawBackground"], "Use :GetPaintBackground instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetDrawBackground"], "Use :SetPaintBackground instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "AddText"], "The function is broken"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "PostMessage"], "Only used by deprecated Derma controls"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "Refresh"], "The function is broken"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetActionFunction"], "Only used in deprecated Derma controls"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetKeyBoardInputEnabled"], "Use :SetKeyboardInputEnabled instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetPaintFunction"], "The function is broken"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetToolTip"], "Use :SetTooltip instead, notice the lowercase fucking t"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetToolTipPanel"], "use :SetTooltipPanel instead, notice the lowercase fucking t"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "Valid"], "Use :IsValid instead"),

        -- Entity functions
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetHitboxBone"], "Use :GetHitBoxBone instead, note the capital fucking B"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedAngle"], "Use :GetNWAngle instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedBool"], "Use :GetNWBool instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedEntity"], "Use :GetNWEntity instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedFloat"], "Use :GetNWFloat instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedInt"], "Use :GetNWInt instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedString"], "Use :GetNWString instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedVarProxy"], "Use :GetNWVarProxy instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedVarTable"], "Use :GetNWVarTable instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetNetworkedVector"], "Use :GetNWVector instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetWorkshopID"], "The function is broken"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetAttachment"], "Use :SetParent instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetNetworkedAngle"], "Use :SetNWAngle instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetNetworkedBool"], "Use :SetNWBool instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetNetworkedEntity"], "Use :SetNWEntity instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetNetworkedFloat"], "Use :SetNWFloat instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetNetworkedInt"], "Use :SetNWInt instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetNetworkedString"], "Use :SetNWString instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetNetworkedVarProxy"], "Use :SetNWVarProxy instead"),
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetNetworkedVector"], "Use :SetNWVector instead"),

        -- Player functions
        (reportDeprecated, "Deprecated", [(==) Colon, ident "GetPunchAngle"], "Use :GetViewPunchAngles instead"),

        -- Material functions
        (reportDeprecated, "Deprecated", [(==) Colon, ident "SetShader"], "The function is broken"),

        -- Vector functions
        (reportDeprecated, "Deprecated", [(==) Colon, ident "DotProduct"], "Use :Dot instead"),

        -- Stupid shit
        (reportBeginnerMistakes, "Stupid", [(==) Semicolon, (==) Semicolon], "There's little fucking reason to use ';' in the first place, don't use it twice in a row"),

        (reportBeginnerMistakes, "Stupid", [ident "net", (==) Dot, ident "WriteEntity", (==) LRound, ident "LocalPlayer", (==) LRound, (==) RRound], "The server already knows who sent the net message, use the first parameter of net.Receive"),
        (reportBeginnerMistakes, "Stupid", [ident "self", (==) Dot, ident "Weapon"], "That's the same as just 'self' in SWEPs"),
        (reportBeginnerMistakes, "Stupid", [ident "self", (==) Dot,  ident "Entity"], "That's the same as just 'self' in SENTs"),
        (reportBeginnerMistakes, "Stupid", [(==) While, whitespace,  (==) TTrue, whitespace, (==) Do, whitespace, (==) End], "Jesus christ fuck off already"),

        -- Whitespace reasoning
        (reportWhitespaceStyle, "Style", [(==) If, not . whitespace], "Please put some whitespace after 'if'"),
        (reportWhitespaceStyle, "Style", [(==) Elseif, not . whitespace], "Please put some whitespace after 'elseif'"),
        (reportWhitespaceStyle, "Style", [(==) While, not . whitespace], "Please put some whitespace after 'while'"),
        (reportWhitespaceStyle, "Style", [(==) Until, not . whitespace], "Please put some whitespace after 'until'"),

        (reportWhitespaceStyle, "Style", [(==) RRound, \t -> not (elem t [RRound, LRound, LSquare, RSquare, LCurly, RCurly, Colon, Comma, Dot, Semicolon]) && not (whitespace t)], "Please put some whitespace after ')'"),
        (reportWhitespaceStyle, "Style", [not . whitespace, (`elem` [Plus, Multiply, Divide, Modulus, TEq, TNEq, TCNEq, TLEQ, TGEQ, TLT, TGT, Equals, Concatenate, And, CAnd, Or, COr])], "Please put some whitespace before the operator"),
        (reportWhitespaceStyle, "Style", [(`elem` [Plus, Multiply, Divide, Modulus, TEq, TNEq, TCNEq, TLEQ, TGEQ, TLT, TGT, Equals, Concatenate, And, CAnd, Or, COr]), not . whitespace], "Please put some whitespace after the operator"),

        -- Profanity. Not because I hate bad words in code, but because
        -- it's very useful to have your temporary debug variables marked by the linter
        (reportProfanity, "Profanity", [ident "bitch"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "cock"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "cocks"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "cunt"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "dick"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "dicks"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "fuck"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "fucking"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "goddamnit"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "knob"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "knobs"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "motherfucker"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "nigger"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "niggers"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "niggertits"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "nipple"], "Watch your profanity."),
        (reportProfanity, "Profanity", [ident "shit"], "Watch your profanity.")
    ]

progress :: LintSettings -> [(LintSettings -> Bool, String, [Token -> Bool], String)] -> Int -> UArray Int Int -> Token -> ([String], UArray Int Int)
progress _ [] _ scan _ = ([], scan)
progress ls ((isConfig, status, x, reason) : xs) i scan tok = (newWarnings, scanned)
    where
        (warnings, scanned) = progress ls xs (succ i) nextScan tok

        -- Array that has the index of the scan for this deprecated
        -- thing updated
        nextScan :: UArray Int Int
        nextScan = scan // [(i, if not isDeprecated && matches then succ (scan ! i) else 0)]

        -- True when this single token of the sequence matches
        matches :: Bool
        matches = isConfig ls && (x !! (scan ! i)) tok

        -- True when the sequence of tokens matches
        isDeprecated :: Bool
        isDeprecated = matches && scan ! i >= length x - 1

        -- Adds the warning to the warnings list
        newWarnings :: [String]
        newWarnings = if not isDeprecated then warnings else
                        (status ++ ": " ++ reason) : warnings


}
----------------------------------------
--  Attributes
----------------------------------------
attr MTokenList MToken Token TokenList
    syn copy :: self
    inh config :: LintSettings

    syn warnings use {++} {[]} :: {[String]}

    chn lineCommentSyntax :: SyntaxUsed
    chn multilineCommentSyntax :: SyntaxUsed
    chn notSyntax :: SyntaxUsed
    chn andSyntax :: SyntaxUsed
    chn orSyntax  :: SyntaxUsed
    chn neqSyntax :: SyntaxUsed
    chn strSyntax :: SyntaxUsed
    chn indentation :: SyntaxUsed -- Let's imagine Lua syntax = spaces, C syntax = tabs

    chn nextTokenPos :: LineColPos


attr MTokenList MToken
    -- How far each deprecation scan is going
    -- The index of the array is the nth element in the badSequences array
    -- The value is the progress
    chn deprScan :: {UArray Int Int}

---------------------------------------
--  Semantics
---------------------------------------
sem MTokenList
    | Cons

    | Nil


sem MToken
    | MToken
        loc.deprecation = progress @lhs.config badSequences 0 @lhs.deprScan @mtok.copy
        lhs.deprScan = snd @loc.deprecation
        loc.mpos = @lhs.nextTokenPos
        loc.copy = MToken @loc.mpos @mtok.copy

        -- Warnings from tokens
        lhs.warnings = map (mTokenWarning @loc.copy) (fst @loc.deprecation ++ @mtok.warnings)

sem Token
    | Whitespace
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @space
        loc.whitespaceUsed = mappend @lhs.indentation $ SyntaxUsed (isInfixOf "\n " @space) (isInfixOf "\n\t" @space)
        loc.inconsistent = luaUsed @loc.whitespaceUsed && cUsed @loc.whitespaceUsed
        loc.indentation = if @loc.inconsistent then mempty else @loc.whitespaceUsed

        +warnings = if not (isInfixOf " \n" @space) && not (isInfixOf "\t\n" @space) then id else
                        (:) "Trailing whitespace"

        +warnings = if not @loc.inconsistent then id else
                        (:) "Inconsistent use of tabs and spaces for indentation"

    | DashComment
        lhs.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.lineCommentSyntax)
        loc.lineCommentSyntax = SyntaxUsed @loc.consistent False -- When inconsistent, reset consistency check
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "--" "//"

    | SlashComment
        lhs.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.lineCommentSyntax)
        loc.lineCommentSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "//" "--"


    | DashBlockComment
        loc.str = showString "--[" . showString (replicate @depth '-') . showChar '[' . showString @comment . showChar ']' . showString (replicate @depth '-') . showChar ']' $ ""
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @loc.str
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.multilineCommentSyntax)
        loc.multilineCommentSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "--[[ ]]" "/* */"

    | SlashBlockComment
        loc.str = showString "/*" . showString @comment . showString "*/" $ ""
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @loc.str
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.multilineCommentSyntax)
        loc.multilineCommentSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "/* */" "--[[ ]]"

    | Semicolon TNumber DQString SQString TTrue TFalse Nil VarArg Plus Minus Multiply Divide Modulus Power TEq TNEq TCNEq TLEQ TGEQ TLT TGT Equals Concatenate Colon Dot Comma Hash Not CNot And CAnd Or COr Function Local If Then Elseif Else For In Do While Until Repeat Continue Break Return End Goto LRound RRound LCurly RCurly LSquare RSquare Identifier
        lhs.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy

    | DQString
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.strSyntax)
        loc.strSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "double quoted strings" "single quoted strings"

    | SQString
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.strSyntax) || length @str == 1 -- Allow single character ' ' strings
        loc.strSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "single quoted strings" "double quoted strings"

    | MLString
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @str

    | Not
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.notSyntax)
        loc.notSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "not" "!"

    | CNot
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.notSyntax)
        loc.notSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "!" "not"

    | And
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.andSyntax)
        loc.andSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "and" "&&"

    | CAnd
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.andSyntax)
        loc.andSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "&&" "and"

    | Or
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.orSyntax)
        loc.orSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "or" "||"

    | COr
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.orSyntax)
        loc.orSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "||" "or"

    | TNEq
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.neqSyntax)
        loc.neqSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "~=" "!="

    | TCNEq
        loc.consistent = (not . reportSyntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.neqSyntax)
        loc.neqSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "!=" "~="

    | Label
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos (showString "::" . showString @lbl . showString "::" $ "")

{


inh_MTokenList :: LintSettings -> Inh_MTokenList
inh_MTokenList conf = Inh_MTokenList {
                    config_Inh_MTokenList                   = conf,
                    andSyntax_Inh_MTokenList                = mempty,
                    indentation_Inh_MTokenList              = mempty,
                    lineCommentSyntax_Inh_MTokenList        = mempty,
                    multilineCommentSyntax_Inh_MTokenList   = mempty,
                    neqSyntax_Inh_MTokenList                = mempty,
                    notSyntax_Inh_MTokenList                = mempty,
                    orSyntax_Inh_MTokenList                 = mempty,
                    strSyntax_Inh_MTokenList                = mempty,
                    deprScan_Inh_MTokenList                 = array (0, length badSequences - 1) (zip [0..] (replicate (length badSequences - 1) 0)),
                    nextTokenPos_Inh_MTokenList             = LineColPos 0 0 0
                 }

lintWarnings        :: LintSettings -> [MToken] -> [String]
lintWarnings conf p = warnings_Syn_MTokenList (wrap_MTokenList (sem_MTokenList p) (inh_MTokenList conf))

-- Necessary because uu-parsinglib parses tabs as 8 spaces
fixedLexPositions   :: [MToken] -> [MToken]
fixedLexPositions p = copy_Syn_MTokenList (wrap_MTokenList (sem_MTokenList p) (inh_MTokenList defaultLintSettings))
}
