module {GLuaFixer.AG.LexLint}{}{}

imports
{
import Data.Array.Unboxed
import qualified Data.Vector.Unboxed as V
import Data.List
import GLua.TokenTypes
import GLua.AG.Token
import GLua.AG.PrettyPrint
import GLuaFixer.LintSettings
}
include "../../GLua/AG/Token.ag"


{
----------------------------------------
--  Correcting token positions
----------------------------------------
customAdvanceChr :: LineColPos -> Char -> LineColPos
customAdvanceChr (LineColPos line pos abs) '\n' = LineColPos (line + 1) 0 (abs + 1)
customAdvanceChr (LineColPos line pos abs) _    = LineColPos line (pos + 1) (abs + 1)

customAdvanceStr :: LineColPos -> String -> LineColPos
customAdvanceStr lp str = foldl' customAdvanceChr lp str

customAdvanceToken :: LineColPos -> Token -> LineColPos
customAdvanceToken (LineColPos line pos abs) t = let len = tokenSize t in LineColPos line (pos + len) (abs + len)

----------------------------------------
--  C-style / Lua-style syntax inconsistencies
----------------------------------------
-- For detecting the usage of Lua/C syntax inconsistently
data SyntaxUsed = SyntaxUsed { luaUsed :: Bool, cUsed :: Bool } deriving (Show)

-- Monoid instance
instance Monoid SyntaxUsed where
    mempty = SyntaxUsed False False
    mappend (SyntaxUsed l1 c1) (SyntaxUsed l2 c2) = SyntaxUsed (l1 || l2) (c1 || c2)

-- Syntax inconsistency warning
syntaxInconsistency :: String -> String -> String
syntaxInconsistency l c = "Inconsistent use of '" ++ l ++ "' and '" ++ c ++ "'"

mTokenWarning :: LineColPos -> String -> String
mTokenWarning pos str = "[Warning] " ++ renderPos pos ++ ": " ++ str

-- Whether a token is whitespace
whitespace :: Token -> Bool
whitespace (Whitespace _) = True
whitespace _ = False

isSingleChar :: String -> Bool
isSingleChar [] = True
isSingleChar ('\\' : xs) = length xs == 1
isSingleChar (_ : []) = True
isSingleChar _ = False

-- Whether a token is a certain identifier
ident :: String -> Token -> Bool
ident s (Identifier s') = s == s'
ident _ _  = False

----------------------------------------
--  Deprecated stuff
----------------------------------------
badSequences :: [(LintSettings -> Bool, [Token -> Bool], String)]
badSequences = [
        -- Global/library functions
        (lint_deprecated, [ident "gcinfo"], "Deprecated: Use collectgarbage(\"count\") instead"),
        (lint_deprecated, [ident "GetConVarNumber"], "Deprecated: Use ConVar objects instead"),
        (lint_deprecated, [ident "GetConVarString"], "Deprecated: Use ConVar objects instead"),
        (lint_deprecated, [ident "IncludeCS"], "Deprecated: Use AddCSLuaFile in the file itself instead"),
        (lint_deprecated, [ident "SScale"], "Deprecated: Use ScreenScale instead"),
        (lint_deprecated, [ident "UTIL_IsUselessModel"], "Deprecated: Use IsUselessModel instead"),
        (lint_deprecated, [ident "ValidPanel"], "Deprecated: Use IsValid instead"),

        (lint_deprecated, [ident "ai", (==) Dot, ident "GetScheduleID"], "Deprecated: The function is broken"),
        (lint_deprecated, [ident "ai", (==) Dot, ident "GetTaskID"], "Deprecated: The function is broken"),

        (lint_deprecated, [ident "math", (==) Dot, ident "Dist"], "Deprecated: Use math.Distance instead"),
        (lint_deprecated, [ident "math", (==) Dot, ident "mod"], "Deprecated: Use math.fmod instead"),

        (lint_deprecated, [ident "spawnmenu", (==) Dot, ident "DoSaveToTextFiles"], "Deprecated: Use spawnmenu.SaveToTextFiles instead"),
        (lint_deprecated, [ident "spawnmenu", (==) Dot, ident "PopulateFromEngineTextFiles"], "Deprecated: Use spawnmenu.PopulateFromTextFiles instead"),
        (lint_deprecated, [ident "spawnmenu", (==) Dot, ident "SwitchToolTab"], "Deprecated: The function is broken"),

        (lint_deprecated, [ident "string", (==) Dot, ident "GetChar"], "Deprecated: Use either string.sub(str, index, index) or str[index]"),
        (lint_deprecated, [ident "string", (==) Dot, ident "gfind"], "Deprecated: Use string.gmatch instead"),

        (lint_deprecated, [ident "surface", (==) Dot, ident "ScreenHeight"], "Deprecated: Use ScrH instead"),
        (lint_deprecated, [ident "surface", (==) Dot, ident "ScreenWidth"], "Deprecated: Use ScrW instead"),

        (lint_deprecated, [ident "table", (==) Dot, ident "FindNext"], "Deprecated: Use ipairs or something instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "FindPrev"], "Deprecated: Use ipairs or something instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "foreach"], "Deprecated: Use pairs instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "ForEach"], "Deprecated: Use pairs instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "foreachi"], "Deprecated: Use ipairs instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "GetFirstKey"], "Deprecated: Use next instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "GetFirstValue"], "Deprecated: Use next instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "GetLastKey"], "Deprecated: Use #tbl instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "GetLastValue"], "Deprecated: Use tbl[#tbl] instead"),
        (lint_deprecated, [ident "table", (==) Dot, ident "getn"], "Deprecated: Use #tbl instead"),

        (lint_deprecated, [ident "timer", (==) Dot, ident "Check"], "Deprecated: The function is broken"),
        (lint_deprecated, [ident "timer", (==) Dot, ident "Destroy"], "Deprecated: Use timer.Remove instead"),

        (lint_deprecated, [ident "umsg", (==) Dot, ident "Start"], "Deprecated: Use net messages."),
        (lint_deprecated, [ident "SendUserMessage"], "Deprecated: Use net messages."),

        (lint_deprecated, [ident "util", (==) Dot, ident "tobool"], "Deprecated: Use tobool, without the util bit"),
        (lint_deprecated, [ident "util", (==) Dot, ident "TraceEntityHull"], "Deprecated: The function is broken"),

        -- CLuaLocomotion functions
        (lint_deprecated, [(==) Colon, ident "IsAscendingOrDescendingLadder"], "Deprecated: Use :IsUsingLadder instead"),

        -- Panel functions
        (lint_deprecated, [(==) Colon, ident "GetDrawBackground"], "Deprecated: Use :GetPaintBackground instead"),
        (lint_deprecated, [(==) Colon, ident "SetDrawBackground"], "Deprecated: Use :SetPaintBackground instead"),
        (lint_deprecated, [(==) Colon, ident "AddText"], "Deprecated: The function is broken"),
        (lint_deprecated, [(==) Colon, ident "PostMessage"], "Deprecated: Only used by deprecated Derma controls"),
        (lint_deprecated, [(==) Colon, ident "Refresh"], "Deprecated: The function is broken"),
        (lint_deprecated, [(==) Colon, ident "SetActionFunction"], "Deprecated: Only used in deprecated Derma controls"),
        (lint_deprecated, [(==) Colon, ident "SetKeyBoardInputEnabled"], "Deprecated: Use :SetKeyboardInputEnabled instead"),
        (lint_deprecated, [(==) Colon, ident "SetPaintFunction"], "Deprecated: The function is broken"),
        (lint_deprecated, [(==) Colon, ident "SetToolTip"], "Deprecated: Use :SetTooltip instead, notice the lowercase fucking t"),
        (lint_deprecated, [(==) Colon, ident "SetToolTipPanel"], "Deprecated: use :SetTooltipPanel instead, notice the lowercase fucking t"),
        (lint_deprecated, [(==) Colon, ident "Valid"], "Deprecated: Use :IsValid instead"),

        -- Entity functions
        (lint_deprecated, [(==) Colon, ident "GetHitboxBone"], "Deprecated: Use :GetHitBoxBone instead, note the capital fucking B"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedAngle"], "Deprecated: Use :GetNWAngle instead"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedBool"], "Deprecated: Use :GetNWBool instead"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedEntity"], "Deprecated: Use :GetNWEntity instead"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedFloat"], "Deprecated: Use :GetNWFloat instead"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedInt"], "Deprecated: Use :GetNWInt instead"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedString"], "Deprecated: Use :GetNWString instead"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedVarProxy"], "Deprecated: Use :GetNWVarProxy instead"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedVarTable"], "Deprecated: Use :GetNWVarTable instead"),
        (lint_deprecated, [(==) Colon, ident "GetNetworkedVector"], "Deprecated: Use :GetNWVector instead"),
        (lint_deprecated, [(==) Colon, ident "GetWorkshopID"], "Deprecated: The function is broken"),
        (lint_deprecated, [(==) Colon, ident "SetAttachment"], "Deprecated: Use :SetParent instead"),
        (lint_deprecated, [(==) Colon, ident "SetNetworkedAngle"], "Deprecated: Use :SetNWAngle instead"),
        (lint_deprecated, [(==) Colon, ident "SetNetworkedBool"], "Deprecated: Use :SetNWBool instead"),
        (lint_deprecated, [(==) Colon, ident "SetNetworkedEntity"], "Deprecated: Use :SetNWEntity instead"),
        (lint_deprecated, [(==) Colon, ident "SetNetworkedFloat"], "Deprecated: Use :SetNWFloat instead"),
        (lint_deprecated, [(==) Colon, ident "SetNetworkedInt"], "Deprecated: Use :SetNWInt instead"),
        (lint_deprecated, [(==) Colon, ident "SetNetworkedString"], "Deprecated: Use :SetNWString instead"),
        (lint_deprecated, [(==) Colon, ident "SetNetworkedVarProxy"], "Deprecated: Use :SetNWVarProxy instead"),
        (lint_deprecated, [(==) Colon, ident "SetNetworkedVector"], "Deprecated: Use :SetNWVector instead"),

        -- Player functions
        (lint_deprecated, [(==) Colon, ident "GetPunchAngle"], "Deprecated: Use :GetViewPunchAngles instead"),

        -- Material functions
        (lint_deprecated, [(==) Colon, ident "SetShader"], "Deprecated: The function is broken"),

        -- Vector functions
        (lint_deprecated, [(==) Colon, ident "DotProduct"], "Deprecated: Use :Dot instead"),

        -- Stupid shit
        (lint_beginnerMistakes, [(==) Semicolon, (==) Semicolon], "There's little fucking reason to use ';' in the first place, don't use it twice in a row"),

        (lint_beginnerMistakes, [ident "net", (==) Dot, ident "WriteEntity", (==) LRound, ident "LocalPlayer", (==) LRound, (==) RRound], "The server already knows who sent the net message, use the first parameter of net.Receive"),
        (lint_beginnerMistakes, [(==) While, whitespace,  (==) TTrue, whitespace, (==) Do, whitespace, (==) End], "Jesus christ fuck off already"),

        -- Whitespace reasoning
        (lint_whitespaceStyle, [(==) If, not . whitespace], "Style: Please put some whitespace after 'if'"),
        (lint_whitespaceStyle, [(==) Elseif, not . whitespace], "Style: Please put some whitespace after 'elseif'"),
        (lint_whitespaceStyle, [(==) While, not . whitespace], "Style: Please put some whitespace after 'while'"),
        (lint_whitespaceStyle, [(==) Until, not . whitespace], "Style: Please put some whitespace after 'until'"),

        (lint_whitespaceStyle, [(==) RRound, \t -> not (elem t [RRound, LRound, LSquare, RSquare, LCurly, RCurly, Colon, Comma, Dot, Semicolon]) && not (whitespace t)], "Style: Please put some whitespace after ')'"),
        (lint_whitespaceStyle, [not . whitespace, (`elem` [Plus, Multiply, Divide, Modulus, TEq, TNEq, TCNEq, TLEQ, TGEQ, TLT, TGT, Equals, Concatenate, And, CAnd, Or, COr])], "Style: Please put some whitespace before the operator"),
        (lint_whitespaceStyle, [(`elem` [Plus, Multiply, Divide, Modulus, TEq, TNEq, TCNEq, TLEQ, TGEQ, TLT, TGT, Equals, Concatenate, And, CAnd, Or, COr]), not . whitespace], "Style: Please put some whitespace after the operator"),

        -- Profanity. Not because I hate bad words in code, but because
        -- it's very useful to have your temporary debug variables marked by the linter
        (lint_profanity, [ident "anus"], "Watch your profanity."),
        (lint_profanity, [ident "bitch"], "Watch your profanity."),
        (lint_profanity, [ident "cock"], "Watch your profanity."),
        (lint_profanity, [ident "cocks"], "Watch your profanity."),
        (lint_profanity, [ident "cunt"], "Watch your profanity."),
        (lint_profanity, [ident "dick"], "Watch your profanity."),
        (lint_profanity, [ident "dicks"], "Watch your profanity."),
        (lint_profanity, [ident "fuck"], "Watch your profanity."),
        (lint_profanity, [ident "fucking"], "Watch your profanity."),
        (lint_profanity, [ident "goddamnit"], "Watch your profanity."),
        (lint_profanity, [ident "knob"], "Watch your profanity."),
        (lint_profanity, [ident "knobs"], "Watch your profanity."),
        (lint_profanity, [ident "motherfucker"], "Watch your profanity."),
        (lint_profanity, [ident "nigger"], "Watch your profanity."),
        (lint_profanity, [ident "niggers"], "Watch your profanity."),
        (lint_profanity, [ident "niggertits"], "Watch your profanity."),
        (lint_profanity, [ident "nipple"], "Watch your profanity."),
        (lint_profanity, [ident "shit"], "Watch your profanity.")
    ]

-- Only the lint settings that are applicable
applicableBadSequences :: LintSettings -> [(Int, [Token -> Bool], String)]
applicableBadSequences ls = map removeCondition . filter applies $ badSequences
    where
        removeCondition :: (LintSettings -> Bool, [Token -> Bool], String) -> (Int, [Token -> Bool], String)
        removeCondition (_, sequence, warning) = (length sequence, sequence, warning)

        applies :: (LintSettings -> Bool, [Token -> Bool], String) -> Bool
        applies (f, _, _) = f ls

progressScan :: [(Int, [Token -> Bool], String)] -> Token -> V.Vector Int -> ([String], V.Vector Int)
progressScan badSeq tok vec = (warnings, progressed)
    where
        warnings :: [String]
        warnings = snd $ foldl checkWarning (0, []) badSeq

        checkWarning :: (Int, [String]) -> (Int, [Token -> Bool], String) -> (Int, [String])
        checkWarning (i, xs) (len, _, warning) = if vec V.! i /= len then (succ i, xs) else (succ i, warning : xs)

        progressed :: V.Vector Int
        progressed = vec V.// replacements

        -- The replacements in the vector to progress
        replacements :: [(Int, Int)]
        replacements = foldl prog [] badSeq

        -- Progress a single bad sequence
        prog :: [(Int, Int)] -> (Int, [Token -> Bool], String) -> [(Int, Int)]
        prog [] (len, x, _) = let   pos = vec V.! 0
                                    pos' = if pos == len then 0 else pos in -- when a previous iteration found a warning
                                    if (x !! pos') tok then [(0, pos' + 1)] else [(0, 0)]
        prog xs@((k, _) : _) (len, x, _) = let key = succ k
                                               pos = vec V.! key
                                               pos' = if pos == len then 0 else pos in
                                               if (x !! pos') tok then (key, pos' + 1) : xs else (key, 0) : xs



-- Locate the exact position of trailing whitespace
locateTrailingWhitespace :: LineColPos -> String -> LineColPos
locateTrailingWhitespace pos (' ' : '\n' : xs) = pos
locateTrailingWhitespace pos ('\t' : '\n' : xs) = pos
locateTrailingWhitespace pos (x : xs) = locateTrailingWhitespace (customAdvanceChr pos x) xs
locateTrailingWhitespace pos [] = pos

}
----------------------------------------
--  Attributes
----------------------------------------
attr MTokenList MToken Token TokenList
    syn copy :: self
    inh config :: LintSettings
    inh badSequences :: {[(Int, [Token -> Bool], String)]}

    syn warnings use {++} {[]} :: {[String]}

    chn lineCommentSyntax :: SyntaxUsed
    chn multilineCommentSyntax :: SyntaxUsed
    chn notSyntax :: SyntaxUsed
    chn andSyntax :: SyntaxUsed
    chn orSyntax  :: SyntaxUsed
    chn neqSyntax :: SyntaxUsed
    chn strSyntax :: SyntaxUsed
    chn indentation :: SyntaxUsed -- Let's imagine Lua syntax = spaces, C syntax = tabs

    chn nextTokenPos :: LineColPos

attr Token
    syn customWarnings use {++} {[]} :: {[String]} -- Warnings where the position is modified

attr MTokenList MToken
    -- How far each deprecation scan is going
    -- The index of the array is the nth element in the badSequences array
    -- The value is the progress
    chn deprScan :: {V.Vector Int}

---------------------------------------
--  Semantics
---------------------------------------
sem MTokenList
    | Cons

    | Nil


sem MToken
    | MToken
        loc.deprecation = progressScan @lhs.badSequences @mtok.copy @lhs.deprScan
        lhs.deprScan = snd @loc.deprecation
        loc.mpos = @lhs.nextTokenPos

        -- Warnings from tokens
        lhs.warnings = @mtok.customWarnings ++ map (mTokenWarning @loc.mpos) (fst @loc.deprecation ++ @mtok.warnings)

sem Token
    | Whitespace
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @space
        loc.whitespaceUsed = mappend @lhs.indentation $ SyntaxUsed (isInfixOf "\n " @space) (isInfixOf "\n\t" @space)
        loc.inconsistent = luaUsed @loc.whitespaceUsed && cUsed @loc.whitespaceUsed
        loc.indentation = if @loc.inconsistent then mempty else @loc.whitespaceUsed

        +customWarnings = if not (isInfixOf " \n" @space) && not (isInfixOf "\t\n" @space) then id else
                            (:) $ mTokenWarning (locateTrailingWhitespace @lhs.nextTokenPos @space) "Trailing whitespace"

        +warnings = if not @loc.inconsistent then id else
                        (:) "Inconsistent use of tabs and spaces for indentation"

    | DashComment
        lhs.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.lineCommentSyntax)
        loc.lineCommentSyntax = SyntaxUsed @loc.consistent False -- When inconsistent, reset consistency check
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "--" "//"

    | SlashComment
        lhs.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.lineCommentSyntax)
        loc.lineCommentSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "//" "--"


    | DashBlockComment
        loc.str = showString "--[" . showString (replicate @depth '-') . showChar '[' . showString @comment . showChar ']' . showString (replicate @depth '-') . showChar ']' $ ""
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @loc.str
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.multilineCommentSyntax)
        loc.multilineCommentSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "--[[ ]]" "/* */"

    | SlashBlockComment
        loc.str = showString "/*" . showString @comment . showString "*/" $ ""
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @loc.str
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.multilineCommentSyntax)
        loc.multilineCommentSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "/* */" "--[[ ]]"

    | Semicolon TNumber DQString SQString TTrue TFalse Nil VarArg Plus Minus Multiply Divide Modulus Power TEq TNEq TCNEq TLEQ TGEQ TLT TGT Equals Concatenate Colon Dot Comma Hash Not CNot And CAnd Or COr Function Local If Then Elseif Else For In Do While Until Repeat Continue Break Return End LRound RRound LCurly RCurly LSquare RSquare Identifier
        lhs.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy

    | DQString
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.strSyntax)
        loc.strSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "double quoted strings" "single quoted strings"

    | SQString
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.strSyntax) || isSingleChar @str -- Allow single character ' ' strings
        loc.strSyntax = SyntaxUsed False (@loc.consistent && not (isSingleChar @str))
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "single quoted strings" "double quoted strings"

    | MLString
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @str

    | Not
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.notSyntax)
        loc.notSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "not" "!"

    | CNot
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.notSyntax)
        loc.notSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "!" "not"

    | And
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.andSyntax)
        loc.andSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "and" "&&"

    | CAnd
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.andSyntax)
        loc.andSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "&&" "and"

    | Or
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.orSyntax)
        loc.orSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "or" "||"

    | COr
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.orSyntax)
        loc.orSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "||" "or"

    | TNEq
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . cUsed $ @lhs.neqSyntax)
        loc.neqSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "~=" "!="

    | TCNEq
        loc.consistent = (not . lint_syntaxInconsistencies $ @lhs.config) || (not . luaUsed $ @lhs.neqSyntax)
        loc.neqSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "!=" "~="

    | Label
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos (showString "::" . showString @lbl . showString "::" $ "")

{


inh_MTokenList :: LintSettings -> Inh_MTokenList
inh_MTokenList conf = let applicable = applicableBadSequences conf in
                 Inh_MTokenList {
                    config_Inh_MTokenList                   = conf,
                    andSyntax_Inh_MTokenList                = mempty,
                    indentation_Inh_MTokenList              = mempty,
                    lineCommentSyntax_Inh_MTokenList        = mempty,
                    multilineCommentSyntax_Inh_MTokenList   = mempty,
                    neqSyntax_Inh_MTokenList                = mempty,
                    notSyntax_Inh_MTokenList                = mempty,
                    orSyntax_Inh_MTokenList                 = mempty,
                    strSyntax_Inh_MTokenList                = mempty,
                    badSequences_Inh_MTokenList             = applicable,
                    deprScan_Inh_MTokenList                 = V.replicate (length applicable) 0,
                    nextTokenPos_Inh_MTokenList             = LineColPos 0 0 0
                 }

lintWarnings        :: LintSettings -> [MToken] -> [String]
lintWarnings conf p = warnings_Syn_MTokenList (wrap_MTokenList (sem_MTokenList p) (inh_MTokenList conf))

-- Necessary because uu-parsinglib parses tabs as 8 spaces
fixedLexPositions   :: [MToken] -> [MToken]
fixedLexPositions p = copy_Syn_MTokenList (wrap_MTokenList (sem_MTokenList p) (inh_MTokenList defaultLintSettings))
}
