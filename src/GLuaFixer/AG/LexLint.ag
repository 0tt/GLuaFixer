module {GLuaFixer.AG.LexLint}{}{}

imports
{
import Data.Array.Unboxed
import Data.List
import GLua.TokenTypes
import GLua.AG.Token
import GLua.AG.PrettyPrint
}
include "../../GLua/AG/Token.ag"


{

----------------------------------------
--  C-style / Lua-style syntax inconsistencies
----------------------------------------
-- For detecting the usage of Lua/C syntax inconsistently
data SyntaxUsed = SyntaxUsed { luaUsed :: Bool, cUsed :: Bool } deriving (Show)

-- Monoid instance
instance Monoid SyntaxUsed where
    mempty = SyntaxUsed False False
    mappend (SyntaxUsed l1 c1) (SyntaxUsed l2 c2) = SyntaxUsed (l1 || l2) (c1 || c2)

-- Syntax inconsistency warning
syntaxInconsistency :: String -> String -> String
syntaxInconsistency l c = "Inconsistent use of '" ++ l ++ "' and '" ++ c ++ "'"

mTokenWarning :: MToken -> String -> String
mTokenWarning (MToken pos _) str = "[Warning] " ++ renderPos pos ++ ": " ++ str

-- Whether a token is whitespace
whitespace :: Token -> Bool
whitespace (Whitespace _) = True
whitespace _ = False

----------------------------------------
--  Deprecated stuff
----------------------------------------
badSequences :: [(String, [Token -> Bool], String)]
badSequences = [
        -- Global/library functions
        ("Deprecated", [(==) $ Identifier "gcinfo"], "Use collectgarbage(\"count\") instead"),
        ("Deprecated", [(==) $ Identifier "GetConVarNumber"], "Use ConVar objects instead"),
        ("Deprecated", [(==) $ Identifier "GetConVarString"], "Use ConVar objects instead"),
        ("Deprecated", [(==) $ Identifier "IncludeCS"], "Use AddCSLuaFile in the file itself instead"),
        ("Deprecated", [(==) $ Identifier "SScale"], "Use ScreenScale instead"),
        ("Deprecated", [(==) $ Identifier "UTIL_IsUselessModel"], "Use IsUselessModel instead"),
        ("Deprecated", [(==) $ Identifier "ValidPanel"], "Use IsValid instead"),

        ("Deprecated", [(==) $ Identifier "ai", (==) Dot, (==) $ Identifier "GetScheduleID"], "The function is broken"),
        ("Deprecated", [(==) $ Identifier "ai", (==) Dot, (==) $ Identifier "GetTaskID"], "The function is broken"),

        ("Deprecated", [(==) $ Identifier "math", (==) Dot, (==) $ Identifier "Dist"], "Use math.Distance instead"),
        ("Deprecated", [(==) $ Identifier "math", (==) Dot, (==) $ Identifier "mod"], "Use math.fmod instead"),

        ("Deprecated", [(==) $ Identifier "spawnmenu", (==) Dot, (==) $ Identifier "DoSaveToTextFiles"], "Use spawnmenu.SaveToTextFiles instead"),
        ("Deprecated", [(==) $ Identifier "spawnmenu", (==) Dot, (==) $ Identifier "PopulateFromEngineTextFiles"], "Use spawnmenu.PopulateFromTextFiles instead"),
        ("Deprecated", [(==) $ Identifier "spawnmenu", (==) Dot, (==) $ Identifier "SwitchToolTab"], "The function is broken"),

        ("Deprecated", [(==) $ Identifier "string", (==) Dot, (==) $ Identifier "GetChar"], "Use either string.sub(str, index, index) or str[index]"),
        ("Deprecated", [(==) $ Identifier "string", (==) Dot, (==) $ Identifier "gfind"], "Use string.gmatch instead"),

        ("Deprecated", [(==) $ Identifier "surface", (==) Dot, (==) $ Identifier "ScreenHeight"], "Use ScrH instead"),
        ("Deprecated", [(==) $ Identifier "surface", (==) Dot, (==) $ Identifier "ScreenWidth"], "Use ScrW instead"),

        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "FindNext"], "Use ipairs or something instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "FindPrev"], "Use ipairs or something instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "foreach"], "Use pairs instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "ForEach"], "Use pairs instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "foreachi"], "Use ipairs instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "GetFirstKey"], "Use next instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "GetFirstValue"], "Use next instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "GetLastKey"], "Use #tbl instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "GetLastValue"], "Use tbl[#tbl] instead"),
        ("Deprecated", [(==) $ Identifier "table", (==) Dot, (==) $ Identifier "getn"], "Use #tbl instead"),

        ("Deprecated", [(==) $ Identifier "timer", (==) Dot, (==) $ Identifier "Check"], "The function is broken"),
        ("Deprecated", [(==) $ Identifier "timer", (==) Dot, (==) $ Identifier "Destroy"], "Use timer.Remove instead"),

        ("Deprecated", [(==) $ Identifier "umsg", (==) Dot, (==) $ Identifier "Start"], "Use net messages."),
        ("Deprecated", [(==) $ Identifier "SendUserMessage"], "Use net messages."),

        ("Deprecated", [(==) $ Identifier "util", (==) Dot, (==) $ Identifier "tobool"], "Use tobool, without the util bit"),
        ("Deprecated", [(==) $ Identifier "util", (==) Dot, (==) $ Identifier "TraceEntityHull"], "The function is broken"),

        -- CLuaLocomotion functions
        ("Deprecated", [(==) Colon, (==) $ Identifier "IsAscendingOrDescendingLadder"], "Use :IsUsingLadder instead"),

        -- Panel functions
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetDrawBackground"], "Use :GetPaintBackground instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetDrawBackground"], "Use :SetPaintBackground instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "AddText"], "The function is broken"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "PostMessage"], "Only used by deprecated Derma controls"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "Refresh"], "The function is broken"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetActionFunction"], "Only used in deprecated Derma controls"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetKeyBoardInputEnabled"], "Use :SetKeyboardInputEnabled instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetPaintFunction"], "The function is broken"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetToolTip"], "Use :SetTooltip instead, notice the lowercase fucking t"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetToolTipPanel"], "use :SetTooltipPanel instead, notice the lowercase fucking t"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "Valid"], "Use :IsValid instead"),

        -- Entity functions
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetHitboxBone"], "Use :GetHitBoxBone instead, note the capital fucking B"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedAngle"], "Use :GetNWAngle instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedBool"], "Use :GetNWBool instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedEntity"], "Use :GetNWEntity instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedFloat"], "Use :GetNWFloat instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedInt"], "Use :GetNWInt instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedString"], "Use :GetNWString instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedVarProxy"], "Use :GetNWVarProxy instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedVarTable"], "Use :GetNWVarTable instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetNetworkedVector"], "Use :GetNWVector instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetWorkshopID"], "The function is broken"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetAttachment"], "Use :SetParent instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetNetworkedAngle"], "Use :SetNWAngle instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetNetworkedBool"], "Use :SetNWBool instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetNetworkedEntity"], "Use :SetNWEntity instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetNetworkedFloat"], "Use :SetNWFloat instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetNetworkedInt"], "Use :SetNWInt instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetNetworkedString"], "Use :SetNWString instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetNetworkedVarProxy"], "Use :SetNWVarProxy instead"),
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetNetworkedVector"], "Use :SetNWVector instead"),

        -- Player functions
        ("Deprecated", [(==) Colon, (==) $ Identifier "GetPunchAngle"], "Use :GetViewPunchAngles instead"),

        -- Material functions
        ("Deprecated", [(==) Colon, (==) $ Identifier "SetShader"], "The function is broken"),

        -- Vector functions
        ("Deprecated", [(==) Colon, (==) $ Identifier "DotProduct"], "Use :Dot instead"),

        -- Stupid shit
        ("Stupid", [(==) Semicolon, (==) Semicolon], "There's little fucking reason to use ';' in the first place, don't use it twice in a row"),
        ("Stupid", [(==) Comma, (==) Comma], "Two commas in a row"),

        ("Stupid", [(==) $ Identifier "net", (==) Dot, (==) $ Identifier "WriteEntity", (==) LRound, (==) $ Identifier "LocalPlayer", (==) LRound, (==) RRound], "The server already knows who sent the net message, use the first parameter of net.Receive"),
        ("Stupid", [(==) $ Identifier "self", (==) Dot, (==) $ Identifier "Weapon"], "That's the same as just 'self' in SWEPs"),
        ("Stupid", [(==) $ Identifier "self", (==) Dot,  (==) $ Identifier "Entity"], "That's the same as just 'self' in SENTs"),

        -- Whitespace reasoning
        ("Style", [not . whitespace, (==) Equals, not . whitespace], "Please put some whitespace around the '='"),
        ("Style", [      whitespace, (==) Equals, not . whitespace], "Please put some whitespace around the '='"),
        ("Style", [not . whitespace, (==) Equals,       whitespace], "Please put some whitespace around the '='"),

        ("Style", [(==) If, not . whitespace], "Please put some whitespace after 'if'"),
        ("Style", [(==) Elseif, not . whitespace], "Please put some whitespace after 'elseif'"),
        ("Style", [(==) While, not . whitespace], "Please put some whitespace after 'while'"),
        ("Style", [(==) Until, not . whitespace], "Please put some whitespace after 'until'"),

        ("Style", [(==) RRound, \t -> not (elem t [RRound, LRound, Colon, Comma]) && not (whitespace t)], "Please put some whitespace after ')'")
    ]

progress :: [(String, [Token -> Bool], String)] -> Int -> UArray Int Int -> Token -> ([String], UArray Int Int)
progress [] _ scan _ = ([], scan)
progress ((status, x, reason) : xs) i scan tok = (newWarnings, scanned)
    where
        (warnings, scanned) = progress xs (succ i) nextScan tok

        -- Array that has the index of the scan for this deprecated
        -- thing updated
        nextScan :: UArray Int Int
        nextScan = scan // [(i, if not isDeprecated && matches then succ (scan ! i) else 0)]

        -- True when this single token of the sequence matches
        matches :: Bool
        matches = (x !! (scan ! i)) tok

        -- True when the sequence of tokens matches
        isDeprecated :: Bool
        isDeprecated = matches && scan ! i >= length x - 1

        -- Adds the warning to the warnings list
        newWarnings :: [String]
        newWarnings = if not isDeprecated then warnings else
                        (status ++ ": (" ++ reason ++ ")") : warnings


}
----------------------------------------
--  Attributes
----------------------------------------
attr MTokenList MToken Token TokenList
    syn copy :: self

    syn warnings use {++} {[]} :: {[String]}

    chn lineCommentSyntax :: SyntaxUsed
    chn multilineCommentSyntax :: SyntaxUsed
    chn notSyntax :: SyntaxUsed
    chn andSyntax :: SyntaxUsed
    chn orSyntax  :: SyntaxUsed
    chn neqSyntax :: SyntaxUsed
    chn strSyntax :: SyntaxUsed
    chn indentation :: SyntaxUsed -- Let's imagine Lua syntax = spaces, C syntax = tabs

attr MTokenList MToken
    -- How far each deprecation scan is going
    -- The index of the array is the nth element in the badSequences array
    -- The value is the progress
    chn deprScan :: {UArray Int Int}

---------------------------------------
--  Semantics
---------------------------------------
sem MTokenList
    | Cons

    | Nil


sem MToken
    | MToken
        loc.deprecation = progress badSequences 0 @lhs.deprScan @mtok.copy
        lhs.deprScan = snd @loc.deprecation

        -- Warnings from tokens
        lhs.warnings = map (mTokenWarning @loc.copy) (fst @loc.deprecation ++ @mtok.warnings)

sem Token
    | Whitespace
        loc.whitespaceUsed = mappend @lhs.indentation $ SyntaxUsed (isInfixOf "\n " @space) (isInfixOf "\n\t" @space)
        loc.inconsistent = luaUsed @loc.whitespaceUsed && cUsed @loc.whitespaceUsed
        loc.indentation = if @loc.inconsistent then mempty else @loc.whitespaceUsed

        +warnings = if not (isInfixOf " \n" @space) && not (isInfixOf "\t\n" @space) then id else
                        (:) "Trailing whitespace"

        +warnings = if not @loc.inconsistent then id else
                        (:) "Inconsistent use of tabs and spaces for indentation"

    | DashComment
        loc.consistent = not . cUsed $ @lhs.lineCommentSyntax
        loc.lineCommentSyntax = SyntaxUsed @loc.consistent False -- When inconsistent, reset consistency check
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "--" "//"

    | SlashComment
        loc.consistent = not . luaUsed $ @lhs.lineCommentSyntax
        loc.lineCommentSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "//" "--"


    | DashBlockComment
        loc.consistent = not . cUsed $ @lhs.multilineCommentSyntax
        loc.multilineCommentSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "--[[ ]]" "/* */"

    | SlashBlockComment
        loc.consistent = not . luaUsed $ @lhs.multilineCommentSyntax
        loc.multilineCommentSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "/* */" "--[[ ]]"

    | DQString
        loc.consistent = not . cUsed $ @lhs.strSyntax
        loc.strSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "double quoted strings" "single quoted strings"

    | SQString
        loc.consistent = not . luaUsed $ @lhs.strSyntax
        loc.strSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "single quoted strings" "double quoted strings"

    | Not
        loc.consistent = not . cUsed $ @lhs.notSyntax
        loc.notSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "not" "!"

    | CNot
        loc.consistent = not . luaUsed $ @lhs.notSyntax
        loc.notSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "!" "not"

    | And
        loc.consistent = not . cUsed $ @lhs.andSyntax
        loc.andSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "and" "&&"

    | CAnd
        loc.consistent = not . luaUsed $ @lhs.andSyntax
        loc.andSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "&&" "and"

    | Or
        loc.consistent = not . cUsed $ @lhs.orSyntax
        loc.orSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "or" "||"

    | COr
        loc.consistent = not . luaUsed $ @lhs.orSyntax
        loc.orSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "||" "or"

    | TNEq
        loc.consistent = not . cUsed $ @lhs.neqSyntax
        loc.neqSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "~=" "!="

    | TCNEq
        loc.consistent = not . luaUsed $ @lhs.neqSyntax
        loc.neqSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "!=" "~="



{


inh_MTokenList :: Inh_MTokenList
inh_MTokenList = Inh_MTokenList {
                    andSyntax_Inh_MTokenList                = mempty,
                    indentation_Inh_MTokenList              = mempty,
                    lineCommentSyntax_Inh_MTokenList        = mempty,
                    multilineCommentSyntax_Inh_MTokenList   = mempty,
                    neqSyntax_Inh_MTokenList                = mempty,
                    notSyntax_Inh_MTokenList                = mempty,
                    orSyntax_Inh_MTokenList                 = mempty,
                    strSyntax_Inh_MTokenList                = mempty,
                    deprScan_Inh_MTokenList                 = array (0, length badSequences - 1) (zip [0..] (replicate (length badSequences - 1) 0))
                 }

lintWarnings        :: [MToken] -> [String]
lintWarnings p      = warnings_Syn_MTokenList (wrap_MTokenList (sem_MTokenList p) inh_MTokenList)
}
