module {GLuaFixer.AG.LexLint}{}{}

imports
{
import Data.Array.Unboxed

import GLua.TokenTypes
import GLua.AG.Token
import GLua.AG.PrettyPrint
}
include "../../GLua/AG/Token.ag"


{

----------------------------------------
--  C-style / Lua-style syntax inconsistencies
----------------------------------------
-- For detecting the usage of Lua/C syntax inconsistently
data SyntaxUsed = SyntaxUsed { luaUsed :: Bool, cUsed :: Bool }

-- Monoid instance
instance Monoid SyntaxUsed where
    mempty = SyntaxUsed False False
    mappend (SyntaxUsed l1 c1) (SyntaxUsed l2 c2) = SyntaxUsed (l1 || l2) (c1 || c2)

-- Syntax inconsistency warning
syntaxInconsistency :: String -> String -> String
syntaxInconsistency l c = "Inconsistent use of '" ++ l ++ "' and '" ++ c ++ "'"

mTokenWarning :: MToken -> String -> String
mTokenWarning (MToken pos _) str = "[Warning] " ++ renderPos pos ++ ": " ++ str

----------------------------------------
--  Deprecated stuff
----------------------------------------
deprecatedThings :: [([Token], String)]
deprecatedThings = [
        ([Identifier "ai", Dot, Identifier "GetScheduleID"], "The function is broken"),
        ([Identifier "ai", Dot, Identifier "GetTaskID"], "The function is broken"),
        ([Identifier "gcinfo"], "Use collectgarbage(\"count\") instead"),
        ([Identifier "GetConVarNumber"], "Use ConVar objects instead"),
        ([Identifier "GetConVarString"], "Use ConVar objects instead"),
        ([Identifier "IncludeCS"], "Use AddCSLuaFile in the file itself instead"),
        ([Identifier "SScale"], "Use ScreenScale instead"),
        ([Identifier "UTIL_IsUselessModel"], "Use IsUselessModel instead"),
        ([Identifier "ValidPanel"], "Use IsValid instead")
    ]

progress :: [([Token], String)] -> Int -> UArray Int Int -> Token -> ([String], UArray Int Int)
progress [] _ scan _ = ([], scan)
progress ((x, reason) : xs) i scan tok = (newWarnings, scanned)
    where
        (warnings, scanned) = progress xs (succ i) nextScan tok

        -- Array that has the index of the scan for this deprecated
        -- thing updated
        nextScan :: UArray Int Int
        nextScan = scan // [(i, if not isDeprecated && matches then succ (scan ! i) else 0)]

        -- True when this single token of the sequence matches
        matches :: Bool
        matches = x !! (scan ! i) == tok

        -- True when the sequence of tokens matches
        isDeprecated :: Bool
        isDeprecated = scan ! i >= length x

        -- Adds the warning to the warnings list
        newWarnings :: [String]
        newWarnings = if not isDeprecated then warnings else
                        ("Deprecated: " ++ concatMap show x ++ " (" ++ reason ++ ")") : warnings


}
----------------------------------------
--  Attributes
----------------------------------------
attr MTokenList MToken Token TokenList
    syn copy :: self

    syn warnings use {++} {[]} :: {[String]}

    chn lineCommentSyntax :: SyntaxUsed
    chn notSyntax :: SyntaxUsed
    chn andSyntax :: SyntaxUsed
    chn orSyntax  :: SyntaxUsed
    chn neqSyntax :: SyntaxUsed

attr MTokenList MToken
    -- How far each deprecation scan is going
    -- The index of the array is the nth element in the deprecatedThings array
    -- The value is the progress
    chn deprScan :: {UArray Int Int}

---------------------------------------
--  Semantics
---------------------------------------
sem MTokenList
    | Cons

    | Nil


sem MToken
    | MToken
        loc.deprecation = progress deprecatedThings 0 @lhs.deprScan @mtok.copy
        lhs.deprScan = snd @loc.deprecation

        -- Warnings from tokens
        lhs.warnings = map (mTokenWarning @loc.copy) (fst @loc.deprecation ++ @mtok.warnings)

sem Token
    | DashComment
        loc.consistent = not . cUsed $ @lhs.lineCommentSyntax
        loc.lineCommentSyntax = SyntaxUsed @loc.consistent False -- When inconsistent, reset consistency check
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "--" "//"

    | SlashComment
        loc.consistent = not . luaUsed $ @lhs.lineCommentSyntax
        loc.lineCommentSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "//" "--"

    | Not
        loc.consistent = not . cUsed $ @lhs.notSyntax
        loc.notSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "not" "!"

    | CNot
        loc.consistent = not . luaUsed $ @lhs.notSyntax
        loc.notSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "!" "not"

    | And
        loc.consistent = not . cUsed $ @lhs.andSyntax
        loc.andSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "and" "&&"

    | CAnd
        loc.consistent = not . luaUsed $ @lhs.andSyntax
        loc.andSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "&&" "and"

    | Or
        loc.consistent = not . cUsed $ @lhs.orSyntax
        loc.orSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "or" "||"

    | COr
        loc.consistent = not . luaUsed $ @lhs.orSyntax
        loc.orSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "||" "or"

    | TNEq
        loc.consistent = not . cUsed $ @lhs.neqSyntax
        loc.neqSyntax = SyntaxUsed @loc.consistent False
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "~=" "!="

    | TCNEq
        loc.consistent = not . luaUsed $ @lhs.neqSyntax
        loc.neqSyntax = SyntaxUsed False @loc.consistent
        +warnings = if @loc.consistent then id else
                        (:) $ syntaxInconsistency "!=" "~="



{
inh_MTokenList :: Inh_MTokenList
inh_MTokenList = Inh_MTokenList
                    mempty
                    (array (0, length deprecatedThings - 1) (zip [0..] (replicate (length deprecatedThings - 1) 0))) -- deprScan
                    mempty
                    mempty
                    mempty
                    mempty

lintWarnings        :: [MToken] -> [String]
lintWarnings p      = warnings_Syn_MTokenList (wrap_MTokenList (sem_MTokenList p) inh_MTokenList)
}
